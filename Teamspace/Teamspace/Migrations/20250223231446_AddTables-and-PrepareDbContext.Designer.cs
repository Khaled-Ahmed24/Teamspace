// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teamspace.Configurations;

#nullable disable

namespace Teamspace.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250223231446_AddTables-and-PrepareDbContext")]
    partial class AddTablesandPrepareDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Teamspace.Models.AssignmentAns", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentEmail")
                        .HasColumnType("int");

                    b.Property<string>("StudentEmail1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId", "StudentEmail");

                    b.HasIndex("StudentEmail1");

                    b.ToTable("AssignmentAnss");
                });

            modelBuilder.Entity("Teamspace.Models.Choice", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("choice")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId", "choice");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("Teamspace.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Teamspace.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("StaffEmail")
                        .HasColumnType("int");

                    b.Property<string>("StaffEmail1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StaffEmail1");

                    b.HasIndex("SubjectDepartment", "SubjectLevel");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Teamspace.Models.Material", b =>
                {
                    b.Property<int>("StaffEmail")
                        .HasColumnType("int");

                    b.Property<string>("SubjectDepartment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectLevel")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffEmail1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffEmail", "SubjectDepartment", "SubjectLevel");

                    b.HasIndex("StaffEmail1");

                    b.HasIndex("SubjectDepartment", "SubjectLevel");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Teamspace.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffEmail")
                        .HasColumnType("int");

                    b.Property<string>("StaffEmail1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StaffEmail1");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Teamspace.Models.NewsComment", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommenterEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsId", "Content", "SentAt");

                    b.ToTable("NewsComments");
                });

            modelBuilder.Entity("Teamspace.Models.Post", b =>
                {
                    b.Property<int>("StaffEmail")
                        .HasColumnType("int");

                    b.Property<string>("SubjectDepartment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectLevel")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffEmail1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffEmail", "SubjectDepartment", "SubjectLevel");

                    b.HasIndex("StaffEmail1");

                    b.HasIndex("SubjectDepartment", "SubjectLevel");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Teamspace.Models.PostComment", b =>
                {
                    b.Property<int>("PostStaffEmail")
                        .HasColumnType("int");

                    b.Property<string>("PostSubjectDepartment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostSubjectLevel")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommenterEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostStaffEmail", "PostSubjectDepartment", "PostSubjectLevel", "Content", "SentAt");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("Teamspace.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Teamspace.Models.QuestionAns", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentEmail")
                        .HasColumnType("int");

                    b.Property<string>("StudentAns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmail1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId", "StudentEmail");

                    b.HasIndex("StudentEmail1");

                    b.ToTable("QuestionAnss");
                });

            modelBuilder.Entity("Teamspace.Models.Registeration", b =>
                {
                    b.Property<int>("StaffEmail")
                        .HasColumnType("int");

                    b.Property<string>("SubjectDepartment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectLevel")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffEmail1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffEmail", "SubjectDepartment", "SubjectLevel");

                    b.HasIndex("StaffEmail1");

                    b.HasIndex("SubjectDepartment", "SubjectLevel");

                    b.ToTable("Registerations");
                });

            modelBuilder.Entity("Teamspace.Models.Staff", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Teamspace.Models.Student", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Teamspace.Models.Subject", b =>
                {
                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department", "Level");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Teamspace.Models.AssignmentAns", b =>
                {
                    b.HasOne("Teamspace.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teamspace.Models.Student", "Student")
                        .WithMany("AssignmentAnss")
                        .HasForeignKey("StudentEmail1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Teamspace.Models.Choice", b =>
                {
                    b.HasOne("Teamspace.Models.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Teamspace.Models.Exam", b =>
                {
                    b.HasOne("Teamspace.Models.Staff", "Staff")
                        .WithMany("Exams")
                        .HasForeignKey("StaffEmail1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teamspace.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectDepartment", "SubjectLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Teamspace.Models.Material", b =>
                {
                    b.HasOne("Teamspace.Models.Staff", "Staff")
                        .WithMany("Materials")
                        .HasForeignKey("StaffEmail1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teamspace.Models.Subject", "Subject")
                        .WithMany("Materials")
                        .HasForeignKey("SubjectDepartment", "SubjectLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Teamspace.Models.News", b =>
                {
                    b.HasOne("Teamspace.Models.Staff", "Staff")
                        .WithMany("News")
                        .HasForeignKey("StaffEmail1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Teamspace.Models.NewsComment", b =>
                {
                    b.HasOne("Teamspace.Models.News", "News")
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("Teamspace.Models.Post", b =>
                {
                    b.HasOne("Teamspace.Models.Staff", "Staff")
                        .WithMany("Posts")
                        .HasForeignKey("StaffEmail1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teamspace.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectDepartment", "SubjectLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Teamspace.Models.PostComment", b =>
                {
                    b.HasOne("Teamspace.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostStaffEmail", "PostSubjectDepartment", "PostSubjectLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Teamspace.Models.Question", b =>
                {
                    b.HasOne("Teamspace.Models.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Teamspace.Models.QuestionAns", b =>
                {
                    b.HasOne("Teamspace.Models.Question", "Question")
                        .WithMany("QuestionAnss")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teamspace.Models.Student", "Student")
                        .WithMany("QuestionAnss")
                        .HasForeignKey("StudentEmail1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Teamspace.Models.Registeration", b =>
                {
                    b.HasOne("Teamspace.Models.Staff", "Staff")
                        .WithMany("Registerations")
                        .HasForeignKey("StaffEmail1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teamspace.Models.Subject", "Subject")
                        .WithMany("Registerations")
                        .HasForeignKey("SubjectDepartment", "SubjectLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Teamspace.Models.Student", b =>
                {
                    b.HasOne("Teamspace.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Teamspace.Models.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Teamspace.Models.Exam", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Teamspace.Models.Post", b =>
                {
                    b.Navigation("PostComments");
                });

            modelBuilder.Entity("Teamspace.Models.Question", b =>
                {
                    b.Navigation("Choices");

                    b.Navigation("QuestionAnss");
                });

            modelBuilder.Entity("Teamspace.Models.Staff", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Materials");

                    b.Navigation("News");

                    b.Navigation("Posts");

                    b.Navigation("Registerations");
                });

            modelBuilder.Entity("Teamspace.Models.Student", b =>
                {
                    b.Navigation("AssignmentAnss");

                    b.Navigation("QuestionAnss");
                });

            modelBuilder.Entity("Teamspace.Models.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Materials");

                    b.Navigation("Posts");

                    b.Navigation("Registerations");
                });
#pragma warning restore 612, 618
        }
    }
}
